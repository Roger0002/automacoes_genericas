---
- name: Play que testa o SM
  hosts: clienterhel8.s2linux.local
  gather_facts: true
  tasks:
    # Dica 1
    - name: Executa o Subscription Manager via módulo shell
      ansible.builtin.shell:
        cmd: /usr/sbin/subscription-manager list --available
      register: saida
      when: false

    - name: Cria a variável result_var com a informação da saída anterior tratada
      ansible.builtin.set_fact:
        result_var: "{{ (saida.stdout_lines | select('search', 'SKU:\ *ES011'))[0] }}"
      when: false

    # Dica 2
    - name: rpm -qa
      ansible.builtin.package_facts:
        manager: rpm

    - name: Criando um arquivo que receberá os dados depois
      ansible.builtin.file:
        path: /tmp/file.txt
        state: touch

    - name: Inserindo os dados no arquivo
      ansible.builtin.copy:
        content: "{{ ansible_facts.packages | dict2items | map(attribute='key') | sort | join('\n') }}"
        dest: /tmp/file.txt

    # Dica 3
    - name: Reboot da máquina
      ansible.builtin.reboot:
        msg: "Reboot devido a atualizacoes de pacotes (ciclo mensal)"
        pre_reboot_delay: 60
      when: false

    # Dica 4
    - name: Captura o conteúdo do arquivo /tmp/patch_linux.txt em base64
      ansible.builtin.slurp:
        src: /tmp/patch_linux.txt
      register: content_patch_linux_inter

    - name: Gera uma variável com o conteúdo decodificado do /tmp/patch_linux.txt
      ansible.builtin.set_fact:
        contentfile: "{{ content_patch_linux_inter.content | b64decode }}"

    - name: Grava a substituição desejada
      ansible.builtin.copy:
        content: "{{ contentfile | replace(inventory_hostname, inventory_hostname + ' - patch success') }}"
        dest: /tmp/patch_linux.txt
...
